name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [linux, windows]
        arch: [amd64, arm64]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.1

      - name: Build Binary
        run: |
          mkdir -p dist
          if [ "${{ matrix.os }}" == "windows" ]; then
            GOOS=windows GOARCH=${{ matrix.arch }} go build -o dist/pt-tools-${{ matrix.os }}-${{ matrix.arch }}.exe .
          else
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o dist/pt-tools-${{ matrix.os }}-${{ matrix.arch }} .
          fi

          # 下载并设置 upx
          wget https://github.com/upx/upx/releases/download/v4.2.4/upx-4.2.4-amd64_linux.tar.xz
          tar -Jxf upx*.tar.xz
          cp upx*/upx ./

          # 压缩二进制文件
          if [ "${{ matrix.os }}" != "windows" ]; then
            ./upx dist/pt-tools-${{ matrix.os }}-${{ matrix.arch }}
          fi

          du -sm dist/*
        shell: bash

      - name: Package Binary
        run: |
          TAG=${{ github.ref_name }}
          if [ "${{ matrix.os }}" == "windows" ]; then
            zip -j dist/pt-tools-${{ matrix.os }}-${{ matrix.arch }}-${TAG}.zip dist/pt-tools-${{ matrix.os }}-${{ matrix.arch }}.exe
          else
            tar -czvf dist/pt-tools-${{ matrix.os }}-${{ matrix.arch }}-${TAG}.tar.gz -C dist pt-tools-${{ matrix.os }}-${{ matrix.arch }}
          fi
        shell: bash

      - name: Upload Binaries
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/pt-tools-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}.*

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [linux, windows]
        arch: [amd64, arm64]

    steps:
      - name: Download Binaries
        uses: actions/download-artifact@v3
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/

      - name: List Downloaded Files
        run: ls -l dist/

      - name: Create or Update Release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const tag = '${{ github.ref_name }}';

            // 获取现有的 Releases
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // 查找是否存在对应标签的 Release
            let release = releases.find(r => r.tag_name === tag);

            // 如果不存在，则创建新的 Release
            if (!release) {
              const response = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: `Release ${tag}`,
                prerelease: false,
              });
              release = response.data;
            }

            core.setOutput('upload_url', release.upload_url);
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: |
            dist/pt-tools-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}.*
          asset_name: pt-tools-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}.${{ matrix.os == 'windows' && 'zip' || 'tar.gz' }}
          asset_content_type: application/octet-stream

  # docker:
  #   name: Build and Publish Docker Image
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     # Checkout the repository
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     # Log in to DockerHub
  #     - name: Log in to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     # Build and push the Docker image
  #     - name: Build and Push Docker Image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: true
  #         tags: |
  #           username/pt-tools:latest
  #           username/pt-tools:${{ github.ref_name }}
